// Mocks generated by Mockito 5.4.4 from annotations
// in test/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:test/user/data/user.dart' as _i2;
import 'package:test/user/data/user_action.dart' as _i5;
import 'package:test/user/domain/user_preferences_wrapper.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserPreferencesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferencesWrapper extends _i1.Mock
    implements _i3.UserPreferencesWrapper {
  MockUserPreferencesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveRole(String? role) => (super.noSuchMethod(
        Invocation.method(
          #saveRole,
          [role],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getRole() => (super.noSuchMethod(
        Invocation.method(
          #getRole,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.User> fetchProfileInfo() => (super.noSuchMethod(
        Invocation.method(
          #fetchProfileInfo,
          [],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #fetchProfileInfo,
            [],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User> fetchUserInfoById(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #fetchUserInfoById,
          [userId],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #fetchUserInfoById,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<List<_i5.UserAction>> fetchUserActions(
    String? from,
    String? to,
    String? employeeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserActions,
          [
            from,
            to,
            employeeId,
          ],
        ),
        returnValue: _i4.Future<List<_i5.UserAction>>.value(<_i5.UserAction>[]),
      ) as _i4.Future<List<_i5.UserAction>>);
}
